{"version":3,"file":"static/js/244.004dafcf.chunk.js","mappings":"mTAEMA,EAAW,gCACXC,EAAS,IAAIC,gBAAgB,CACjCC,QAAS,mCACTC,KAAM,IAGKC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBN,EADkB,8BACYC,EAAOM,aAFX,UAKP,OAJlBC,EADyB,QAKlBC,OALkB,sBAMvB,IAAIC,MAAMF,EAASC,QANI,gCASxBD,GATwB,2CAAH,qDAYjBG,EAAe,mCAAG,WAAMC,GAAN,uFACNN,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAY,EADA,YACMX,EAAOM,aAFP,UAKL,OAJlBC,EADuB,QAKhBC,OALgB,sBAMrB,IAAIC,MAAMF,EAASC,QANE,gCAStBD,GATsB,2CAAH,sDAYfK,EAAY,mCAAG,WAAMD,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAY,EADA,oBACcX,EAAOM,aAFlB,UAKF,OAJlBC,EADoB,QAKbC,OALa,sBAMlB,IAAIC,MAAMF,EAASC,QAND,gCASnBD,GATmB,2CAAH,sDAYZM,EAAe,mCAAG,WAAMF,GAAN,uFACNN,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAY,EADA,oBACcX,EAAOM,aAFf,UAKL,OAJlBC,EADuB,QAKhBC,OALgB,sBAMrB,IAAIC,MAAMF,EAASC,QANE,gCAStBD,GATsB,2CAAH,sDAYfO,EAAe,mCAAG,WAAMC,GAAN,uFACNV,EAAAA,EAAAA,IAAA,UAClBN,EADkB,yBACOC,EAAOM,WADd,kBACkCS,IAF5B,UAKL,OAJlBR,EADuB,QAKhBC,OALgB,sBAMrB,IAAIC,MAAMF,EAASC,QANE,gCAStBD,GATsB,2CAAH,qD,mLCtDfS,EAAOC,EAAAA,GAAAA,EAAH,gPAgBJC,EAAOD,EAAAA,GAAAA,GAAH,6CAIJE,EAAOF,EAAAA,GAAAA,GAAH,kRAkBJG,EAASH,EAAAA,GAAAA,GAAH,6EAKNI,EAASJ,EAAAA,GAAAA,EAAH,sB,SCYnB,EAnDgB,WACd,IAAQN,GAAOW,EAAAA,EAAAA,MAAPX,GACR,GAAkCY,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,MAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACRL,GAAa,GAEb,IAAMM,EAAO,mCAAG,gHAIFlB,EAAAA,EAAAA,IAAgBF,GAJd,gBAGFqB,EAHE,EAGVC,KAAQD,QAEVL,EAAgBK,GAChBP,GAAa,GAND,gDAQZI,EAAS,EAAD,IACRJ,GAAa,GATD,yDAAH,qDAabM,GACD,GAAE,CAACpB,KAGF,gCACGa,IAAa,SAACU,EAAA,EAAD,IAEbN,IAAS,wBAAKA,EAAMO,YAElBT,IAAiBA,EAAaU,UAAYZ,IAC3C,SAACR,EAAD,UAAM,8CAGPU,IAAiBF,IAChB,SAACN,EAAD,UACGQ,EAAaW,KAAI,YAA8B,IAA3B1B,EAA0B,EAA1BA,GAAI2B,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/B,OACE,UAACpB,EAAD,YACE,UAACC,EAAD,WAAQ,WAASkB,MACjB,SAACjB,EAAD,UAASkB,MAFA5B,EAKd,QAKV,C","sources":["api/getMovies.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst params = new URLSearchParams({\n  api_key: 'ee704e183d11b50a0d8be9a20340402f',\n  page: 1,\n});\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?${params.toString()}`\n  );\n\n  if (response.status !== 200) {\n    throw new Error(response.status);\n  }\n\n  return response;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?${params.toString()}`\n  );\n\n  if (response.status !== 200) {\n    throw new Error(response.status);\n  }\n\n  return response;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?${params.toString()}`\n  );\n\n  if (response.status !== 200) {\n    throw new Error(response.status);\n  }\n\n  return response;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?${params.toString()}`\n  );\n\n  if (response.status !== 200) {\n    throw new Error(response.status);\n  }\n\n  return response;\n};\n\nexport const getSearchMovies = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?${params.toString()}&query=${query}`\n  );\n\n  if (response.status !== 200) {\n    throw new Error(response.status);\n  }\n\n  return response;\n};\n","import styled from 'styled-components';\n\nexport const Info = styled.p`\n  margin-top: 20px;\n\n  font-weight: 500;\n  font-size: 12px;\n  line-height: calc(16 / 12);\n\n  @media (min-width: 768px) {\n    font-size: 14px;\n  }\n\n  @media (min-width: 1280px) {\n    font-size: 18px;\n  }\n`;\n\nexport const List = styled.ul`\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  font-weight: 500;\n  font-size: 12px;\n  line-height: calc(16 / 12);\n\n  @media (min-width: 768px) {\n    font-size: 14px;\n  }\n\n  @media (min-width: 1280px) {\n    font-size: 18px;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Author = styled.h3`\n  margin-bottom: 8px;\n  text-transform: uppercase;\n`;\n\nexport const Review = styled.p``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'api/getMovies';\nimport Loader from 'components/Loader';\nimport { Info, List, Item, Author, Review } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const getData = async () => {\n      try {\n        const {\n          data: { results },\n        } = await getMovieReviews(id);\n        setMovieReviews(results);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n        setIsLoading(false);\n      }\n    };\n\n    getData();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {error && <h2>{error.message}</h2>}\n\n      {(!movieReviews || !movieReviews.length) && !isLoading && (\n        <Info>We don't have any reviews for this movie.</Info>\n      )}\n\n      {movieReviews && !isLoading && (\n        <List>\n          {movieReviews.map(({ id, author, content }) => {\n            return (\n              <Item key={id}>\n                <Author>Author: {author}</Author>\n                <Review>{content}</Review>\n              </Item>\n            );\n          })}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","params","URLSearchParams","api_key","page","getTrendingMovies","axios","toString","response","status","Error","getMovieDetails","id","getMovieCast","getMovieReviews","getSearchMovies","query","Info","styled","List","Item","Author","Review","useParams","useState","isLoading","setIsLoading","movieReviews","setMovieReviews","error","setError","useEffect","getData","results","data","Loader","message","length","map","author","content"],"sourceRoot":""}